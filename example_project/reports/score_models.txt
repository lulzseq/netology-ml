Model: GridSearchCV(cv=10, estimator=LogisticRegression(n_jobs=-1),
             param_grid=[{'C': array([0.001, 0.112, 0.223, 0.334, 0.445, 0.556, 0.667, 0.778, 0.889,
       1.   ]),
                          'penalty': ['l1', 'l2'], 'solver': ['liblinear']}],
             scoring='accuracy')
Accuracy: 0.69
Precision: 0.10
Recall: 0.08
f1_score: 0.09
---
Model: GridSearchCV(cv=10, estimator=DecisionTreeClassifier(), n_jobs=-1,
             param_grid=[{'criterion': ['entropy', 'gini', 'error'],
                          'max_depth': array([ 1,  5, 10, 15, 20]),
                          'max_leaf_nodes': array([ 1,  4,  7, 10, 13, 17, 20, 23, 26, 30])}],
             scoring='accuracy')
Accuracy: 0.84
Precision: 0.66
Recall: 0.32
f1_score: 0.44
---
Model: GridSearchCV(cv=10,
             estimator=XGBClassifier(base_score=None, booster=None,
                                     colsample_bylevel=None,
                                     colsample_bynode=None,
                                     colsample_bytree=None, gamma=None,
                                     gpu_id=None, importance_type='gain',
                                     interaction_constraints=None,
                                     learning_rate=None, max_delta_step=None,
                                     max_depth=None, min_child_weight=None,
                                     missing=nan, monotone_constraints=None,
                                     n_estimators=100, n_jobs=-1,
                                     num_parallel_tree=None, random_state=None,
                                     reg_alpha=None, reg_lambda=None,
                                     scale_pos_weight=None, subsample=None,
                                     tree_method=None, validate_parameters=None,
                                     verbosity=None),
             param_grid={'max_depth': array([ 1,  6, 11, 17, 22, 28, 33, 39, 44, 50]),
                         'n_estimators': array([  1,  12,  23,  34,  45,  56,  67,  78,  89, 100])},
             refit='accuracy_score', scoring=make_scorer(accuracy_score))
Accuracy: 0.88
Precision: 0.76
Recall: 0.57
f1_score: 0.65
---
